Git使用总结
1.下载代码到本地
1.1指定存储文件路径
1.运行git-bash.exe

2.指定盘符：cd f:work

1.2下载代码
命令：$ git clone <版本库的网址> <本地目录名>

版本库的网址：若有用户名、密码，则：http//:用户名@版本库的网址

本地目录名：若不填写此属性则用远程代码仓库名为目录名称；如果填写则用填写名称为本地目录名称。

 

2.更新远程代码
命令: git pull -u origin master:master。

这里的master是我的分支的名称，在使用的时候要换成你自己分支的名称；也可直接 git pull 更新默认分支

3.提交本地代码
3.1查看本地代码状态
命令：git status

状态：

1.已暂存 （changes to be committed）

所列的内容是在Index中的内容，commit之后进入Git Directory

 

new file //表示新建文件

modified //表示修改文件

deleted //表示删除文件

 

2.已修改 （changed but not updated）

  所列的内容是在Working Directory中的内容，add之后将进入Index。

 

modified //表示修改文件

deleted //表示删除文件

 3.未跟踪 （untracked files）

所列的内容是尚未被Git跟踪的内容，add之后进入Index

 

3.2将文件添加至Index暂存
git add命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。

git add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包 括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。

git add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂 存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写）

git add -A ：是上面两个功能的合集（git add --all的缩写）

3.3提交已暂存的文件
1. git commit -m "备注说明"

这个命令表示添加备注

2. git push -u origin master:master 

提交到Git仓库。这里master为我自己的分支的名称，实际应用中，你要改成自己的分支的名称

Git global setup
git config --global user.name "刘文博"
git config --global user.email "392131870@qq.com"


从远程仓库下载项目，github上要生成秘钥，并配置，才能进行ssh传输 https://www.cnblogs.com/qiaoyun/p/7498354.html
1.生成秘钥
$ ssh-keygen -t rsa -C "cxylucky0816@gmail.com" 连接的GitHub账户

Create a new repository
git clone http://192.168.1.40:8000/ccm/ccm.git
cd ccm
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master



Existing folder or Git repository
cd existing_folder
git init
git remote add origin http://180.168.71.6:8000/ccm/ccm.git
git add .
git commit -m "添加注释"
git pull --rebase origin master --让README.md在本地目录中
git push -u origin master

ls-lah 显示隐藏文件夹

git 拉取GitHub上的代码
1.生成秘钥
$ ssh-keygen -t rsa -C "cxylucky0816@gmail.com"


# 提交到 Github
$ git remote add origin git@github.com:tianqixin/runoob-git-test.git
$ git push -u origin master

查看当前的远程库
$ git remote
origin
$ git remote -v
origin    git@github.com:tianqixin/runoob-git-test.git (fetch)
origin    git@github.com:tianqixin/runoob-git-test.git (push)

提取远程仓库
1、从远程仓库下载新分支与数据
git fetch	

该命令执行完后需要执行git merge 远程分支到你所在的分支。

2、从远端仓库提取数据并尝试合并到当前分支：
git merge

该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。
假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 git fetch [alias] 告诉 Git 去获取它有你没有的数据，
然后你可以执行 git merge [alias]/[branch] 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。



推送到远程仓库
git push [alias] [branch]

$ touch runoob-test.txt      # 添加文件
$ git add runoob-test.txt 
$ git commit -m "添加到远程"
master 69e702d] 添加到远程
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 runoob-test.txt

$ git push origin master    # 推送到 Github
重新回到我们的 Github 仓库，可以看到文件以及提交上来了：


Git 工作区、暂存区和版本库

工作区：就是你在电脑里能看到的目录。

暂存区：英文叫stage, 或index。一般存放在 ".git目录下" 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。

版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。

图中左侧为工作区，右侧为版本库。在版本库中标记为 "index" 的区域是暂存区（stage, index），标记为 "master" 的是 master 分支所代表的目录树。

图中我们可以看出此时 "HEAD" 实际是指向 master 分支的一个"游标"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。

图中的 objects 标识的区域为 Git 的对象库，实际位于 ".git/objects" 目录下，里面包含了创建的各种对象及内容。


当对工作区修改（或新增）的文件执行 "git add" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。

当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。


