
SSH整合

Web.xml中配置Struts2 fitler 拦截器，加载status2.xml文件，主要配置action。
      <!-- 为Struts2配置过滤器 -->
      <filter>
          <filter-name>struts2</filter-name>
          <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
      </filter>
  
      <filter-mapping>
          <filter-name>struts2</filter-name>
          <url-pattern>/*</url-pattern>
      </filter-mapping>

status2.xml，主要配置action。

Web.xml中配置Sring listener监听器。
  <!-- 配置Spring的监听器 -->
      <listener>
          <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
      </listener>

<!-- 为Spring监听器提供启动参数 -->
    <context-param>
          <param-name>contextConfigLocation</param-name>
          <!-- 这里如果bean.xml在包cn.ssh下，那么就应该写为：cn/ssh/bean.xml -->
         <param-value>classpath:bean.xml</param-value>
      </context-param>


 导入Spring整合Web项目的jar包，也就是监控项目启动的监听器所在的jar包。
spring.xml管理bean，配置datasource，事务管理，sessionFactory，

Hibernate和Spring整合的具体步骤
1. 把Hibernate中的核心配置文件中数据据库的配置交给Spring来管理
2. 把Hibernate中SessionFactory的创建也是交给Spring来管理的
	导入Hibernate的jar包
	Spring和ORM相关jar包的导入
	spring-orm

 创建hibernate的核心配置文件hibernate.cfg.xml
 <!-- 连接数据库的信息 -->

 <!-- hibernate的配置信息 -->
 !-- 配置C3P0连接池 -->
 <!-- 设置jdbc的隔离级别 -->
 <!-- 加载映射文件 -->

在Spring中配置DataSource

 <!-- 将Hibernate中配置数据库放到Spring当中配置 -->
  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
     <!-- 连接数据库的信息 -->
     <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
     <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/spring_struts2</property>
     <property name="hibernate.connection.username">root</property>
     <property name="hibernate.connection.password">123456</property>
 </bean>

 配置sessionFactory
  <!-- 配置SessionFactory创建 -->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
           <!-- 指定数据库信息，也就是给它一个dataSource -->
           <property name="dataSource" ref="dataSource"></property>
          <!-- 指定hibernate核心配置文件 -->
           <property name="configLocations" value="classpath:hibernate.cfg.xml"></property>
  </bean>

为UserDao.java中注入HibernateTemplate模板注入对象

<!-- userDao -->
   <bean id="userDao" class="com.ssh.dao.UserDao">
       <!-- 注入hibernateTemplate -->
       <property name="hibernateTemplate" ref="hibernateTemplate"></property>
  </bean>
 <!-- 配置HibernateTemplate -->
 <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
     <!-- 注入sessionFactory -->
     <property name="sessionFactory" ref="sessionFactory"></property>
 </bean>

注解开启
  <!-- 配置事务管理器 -->
   <!-- 注意这里用的是hibernate5 -->
   <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
       <property name="sessionFactory" ref="sessionFactory"></property>
   </bean>
   
   <!-- 开启事务注解 -->
   <tx:annotation-driven transaction-manager="transactionManager" />

1. 导入jar包
2. 搭建struts2环境
    2.1 创建Action，创建struts.xml配置文件
    2.2 在web.xml中配置struts2的过滤器
3. 搭建Hibernate环境
    3.1 创建实体类
    3.2 配置实体类和数据库表的映射关系
    3.3 创建hibernate核心配置文件，并引入映射配置文件
4. 搭建Spring环境
    4.1 创建Spring的核心配置文件
    4.2 让spring配置文件在服务器启动的时候加载，其中需要配置监听器和指定Spring配置文件的路径
5. struts2和spirng整合
    5.1 把action在spring配置（action多实例的）
    5.2 在struts.xml中action标签class属性里面写bean的id值
6. spring和hibernate整合
    6.1 把hibernate核心配置文件中数据库的配置放到spring里面配置
    6.2 把hibernate的sessionFactory在Spring中配置
7. 在dao中使用HibernateTemplate的对象
    7.1 在dao中注入hibernateTemplate对象
    7.2 在hibernate对象中注入sessionFactory
8. 配置事务


SSM整合
首先进行Spring与MyBatis的整合
建立JDBC属性文件jdbc.properties设定数据库连接信息

建立spring-mybatis.xml配置文件
这个文件就是用来完成spring和mybatis的整合的。这里面也没多少行配置，主要的就是自动扫描，自动注入，配置数据库。

<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/cn/hnust/mapping/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cn.hnust.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

Log4j的配置

整合SpringMVC
pringMVC的配置文件单独放，然后在web.xml中配置整合

配置spring-mvc.xml
自动扫描控制器，视图模式，注解的启动这三个
<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.cn.hnust.controller" />
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

配置web.xml文件
这里面对spring-mybatis.xml的引入以及配置的spring-mvc的Servlet就是为了完成SSM整合

<!-- Spring和mybatis的配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-mybatis.xml</param-value>
	</context-param>

	<!-- Spring监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

<!-- Spring MVC servlet -->
	<servlet>
		<servlet-name>SpringMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<!-- 此处可以可以配置成*.do，对应struts的后缀习惯 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

