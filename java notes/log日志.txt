日志记录器(Logger)是日志处理的核心组件。log4j具有5种正常级别(Level)。:

 1.static Level DEBUG :

    DEBUG Level指出细粒度信息事件对调试应用程序是非常有帮助的。

 2.static Level INFO

    INFO level表明 消息在粗粒度级别上突出强调应用程序的运行过程。

 3.static Level WARN

    WARN level表明会出现潜在错误的情形。

 4.static Level ERROR

    ERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。

 5.static Level FATAL

    FATAL level指出每个严重的错误事件将会导致应用程序的退出。

另外，还有两个可用的特别的日志记录级别:

 1.static Level ALL

    ALL Level是最低等级的，用于打开所有日志记录。

 2.static Level OFF

    OFF Level是最高等级的，用于关闭所有日志记录。

    日志记录器（Logger）的行为是分等级的： 
    分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。Log4j建议只使用四个级别，优先级 从高到低分别是 ERROR、WARN、INFO、DEBUG。 
    通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别， 则应用程序中所有DEBUG级别的日志信息将不被打印出来。

    优先级高的将被打印出来。项目上生产环境时候建议把debug的日志级别重新调为warn或者更高，避免产生大量日志。


og4j是apache基金会的一个项目,日志记录器(Logger)是日志处理的核心组件,log4j具有7种级别(Level).

DEBUG Level: 指出细粒度信息事件对调试应用程序是非常有帮助的,就是输出debug的信息.
INFO level: 表明消息在粗粒度级别上突出强调应用程序的运行过程,就是输出提示信息.
WARN level: 表明会出现潜在错误的情形,就是显示警告信息.
ERROR level: 指出虽然发生错误事件,但仍然不影响系统的继续运行.就是显示错误信息.
FATAL level: 指出每个严重的错误事件将会导致应用程序的退出.
ALL level: 是最低等级的,用于打开所有日志记录.
OFF level: 是最高等级的,用于关闭所有日志记录.



一共分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG < INFO < WARN < ERROR < FATAL，明白这一点很重要，这里Log4j有一个规则：假设设置了级别为P，如果发生了一个级别Q比P高，则可以启动，否则屏蔽掉。
DEBUG: 这个级别最低的东东，一般的来说，在系统实际运行过程中，一般都是不输出的。因此这个级别的信息，可以随意的使用，任何觉得有利于在调试时更详细的了解系统运行状态的东东，比如变量的值等等，都输出来看看也无妨。
INFO：这个应该用来反馈系统的当前状态给最终用户的，所以，在这里输出的信息，应该对最终用户具有实际意义，也就是最终用户要能够看得明白是什么意思才行。从某种角度上说，Info 输出的信息可以看作是软件产品的一部分（就像那些交互界面上的文字一样），所以需要谨慎对待，不可随便。
WARN、ERROR和FATAL：警告、错误、严重错误，这三者应该都在系统运行时检测到了一个不正常的状态，他们之间的区别，要区分还真不是那么简单的事情。我大致是这样区分的：
所谓警告，应该是这个时候进行一些修复性的工作，应该还可以把系统恢复到正常状态中来，系统应该可以继续运行下去。
所谓错误，就是说可以进行一些修复性的工作，但无法确定系统会正常的工作下去，系统在以后的某个阶段，很可能会因为当前的这个问题，导致一个无法修复的错误（例如宕机），但也可能一直工作到停止也不出现严重问题。
所谓Fatal，那就是相当严重的了，可以肯定这种错误已经无法修复，并且如果系统继续运行下去的话，可以肯定必然会越来越乱。这时候采取的最好的措施不是试图将系统状态恢复到正常，而是尽可能地保留系统有效数据并停止运行。
也就是说，选择 Warn、Error、Fatal 中的具体哪一个，是根据当前的这个问题对以后可能产生的影响而定的，如果对以后基本没什么影响，则警告之，如果肯定是以后要出严重问题的了，则Fatal之，拿不准会怎么样，则 Error 之。
分享


1、log4j.properties日志文件

### 设置###
log4j.rootLogger = debug,stdout,D,E
 
### 输出信息到控制抬 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n
 
### 输出DEBUG 级别以上的日志到=F://logs/error.log ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File =F://logs/log.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n
 
### 输出ERROR 级别以上的日志到=F://logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =F://logs/error.log
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

2、在web.xml配置（要有log4j.jar依赖）
<!--log4j日志配置-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:config/log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jLocation</param-name>
		<param-value>6000</param-value>
	</context-param>
	<!-- 定义LOG4J监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

3、log4j日志内容解析

#　log4j核心
#　--------------------------------------------------------------------------------
#　1、Logger完成日志信息的处理，可以分成不同的级别记录日志信息，如：debug，info，error
#　--------------------------------------------------------------------------------
#　Logger可以定义输出的层次和决定信息是否输出
#　Logger输出的信息是有优先级别的：　ALL,TRACE,DEBUG,INFO,WARN,ERROR,FATAL,OFF------级别由小到大
#　常用的有：DEBUG,INFO,WARN,ERROR
#　--------------------------------------------------------------------------------
#　2、Appender设置日志信息的去向　　如：一个文件中，*.log,*.htm等。或者说是数据库中
#　--------------------------------------------------------------------------------
#　Appender就是设置日志讯息输出到那个地方，可以同时指定多个输出目的地：
#　log4j.rootLogger=debug,appender1,appender2　　　　
#　log4j.appender.appender1=org.apache.log4j.ConsoleAppender
#　log4j.appender.appender2=org.apache.log4j.ConsoleAppender
#　--------------------------------------------------------------------------------
#　3、常用的Appender
#　--------------------------------------------------------------------------------
#　org.apache.log4j.ConsoleAppender（控制台）
#　ogr.apache.log4j.FileAppender(文件)
#　org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#　org.apache.log4j.RollingFileAppender（文件大小达到指定尺寸的时候产生一个新的文件）
#　org.apache.log4j.WiterAppender（将日志讯息一串流格式发送到任意指定的地方）
#　org.apache.log4j.JDBCAppender（将日志讯息保存到数据库中）
#　org.apache.log4j.SMTPAppender（将日志信息以邮件的方式发送到指定的地方）
#　--------------------------------------------------------------------------------
#　4、Layout设置日志信息的输出样式
#　--------------------------------------------------------------------------------
#　Layout提供的layout的方式：
#　org.apache.log4j.HTMLLayout（一HTML表格形式布局）
#　org.apache.log4j.SimpleLayout（包含日志讯息的级别和讯息字符串）
#　org.apache.log4j.TTCCLayout（包含日志产生时间，执行者，类别等讯息）
#　org.apache.log4j.PatternLayout（可以灵活的指定布局模式）
#　--------------------------------------------------------------------------------
#　org.apache.log4j.PatternLayout（可以灵活的指定布局模式）
#　定制所输出的日志信息的样式：
#　%p   输出优先级别：DEBUG,INFO,WARN,ERROR,FATAL
#　%r   输出字应用启动到输出该日志讯息所耗时秒数
#　%t   输出产生该日志事件的线程名
#　%f　 输出日志讯息所属的类别的类别名
#　%c　 输出日志讯息所属的类的全名
#　%d   输出日志时间点的日期或时间
#　%d   {yyyy-MM-dd HH:mm:ss} 指定日期或时间格式
#　%l　 输出日志时间发生的位置，即输出日志讯息的语句处于他所在的类别的第几行
#　%m 　输出代码中指定的讯息
#　%n　 输出一个换行符号
#　--------------------------------------------------------------------------------
 %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n



 配置文件格式
 <?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
    <!-- 
    <appender name="LOG_FILE" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="File" value="/nas/nas_log/logs/oms/poms_admin/oms.log"/>
        <param name="DatePattern" value="'.'yyyy-MM-dd"/>
        <param name="Append" value="true"/>
        <param name="encoding" value="UTF-8"/>

        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                value="[POMS-ADMIN][%d{yyyy-MM-dd HH:mm:ss SSS}] %p [%t] %c{1}.%M(%L) | %m%n"/>
        </layout>        
    </appender>
    
    <appender name="USER_OPER_LOG_FILE" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="File" value="/nas/nas_log/logs/oms/poms_admin/user/oms_user_oper.log"/>
        <param name="DatePattern" value="'.'yyyy-MM-dd"/>
        <param name="Append" value="true"/>
        <param name="encoding" value="UTF-8"/>

        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                value="[POMS-ADMIN][%d{yyyy-MM-dd HH:mm:ss SSS}] %p [%t] %c{1}.%M(%L) | %m%n"/>
        </layout>        
    </appender>
    
    <appender name="ACCESS_ACTION_LOG" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="File" value="/opt/var/log/oms/access_action_records.log"/>
        <param name="DatePattern" value="'.'yyyy-MM-dd"/>
        <param name="Append" value="true"/>
        <param name="encoding" value="UTF-8"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                value="[%d{yyyy-MM-dd HH:mm:ss}| %m%n"/>
        </layout>        
    </appender>
    -->
    <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
        <param name="Target" value="System.out"/>
        <param name="Threshold" value="info" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                value="[MAM-ADMIN][%d{yyyy-MM-dd HH:mm:ss SSS}] %p [%t] %c{1}.%M(%L) | %m%n"/>
        </layout>
    </appender>

    <appender name="link" class="org.apache.log4j.rolling.RollingFileAppender">
        <param name="Append" value="true" />
        <rollingPolicy class="org.apache.log4j.rolling.TimeBasedRollingPolicy">
            <param name="FileNamePattern" value="/opt/logs/%d{yyyyMM}/%d{yyyyMMdd}/MAM-PUBLISH.log" />  
        </rollingPolicy>
        <!-- 设置日志输出的样式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <!-- 设置日志输出的格式 -->
            <param name="ConversionPattern" value="{'time':'%d{yyyy-MM-dd HH:mm:ss,SSS}','loginfo':'%m'}%n" />  
        </layout>
    </appender>
    
    <logger name="PublishLog">  
        <level value="info" />  
        <appender-ref ref="link" />  
    </logger> 
    
    <logger name="com.opensymphony.xwork2.util.OgnlValueStack">
        <level value="ERROR"/>
    </logger>
    
    <logger name="net.sf.ehcache">
        <level value="ERROR"/>
    </logger>

    <logger name="org.apache">
        <level value="ERROR"/>
    </logger>

    <logger name="org.apache.velocity">
        <level value="FATAL"/>
    </logger>

    <logger name="org.hibernate">
        <level value="WARN"/>
    </logger>
  
    <!--logger name="org.hibernate.SQL">
        <level value="DEBUG"/>
    </logger-->

    <logger name="org.springframework">
        <level value="WARN"/>
    </logger>

    <!-- http://issues.appfuse.org/browse/APF-736#action_11786 -->
    <logger name="com.opensymphony.xwork2.util.XWorkConverter">
        <level value="FATAL"/>
    </logger>

    <!-- http://issues.appfuse.org/browse/APF-852 -->
    <logger name="com.opensymphony.xwork2.util.OgnlUtil">
        <level value="ERROR"/>
    </logger>

    <!-- Turn off warnings from messages.jsp -->
    <logger name="com.opensymphony.xwork2">
        <level value="ERROR"/>
    </logger>
    
    <logger name="org.appfuse">
        <level value="ERROR"/>
    </logger>    
	<logger name="jdbc.sqltiming">
	    <level value="INFO"/> 
	</logger>
	<logger name="jdbc.sqlonly">
	    <level value="OFF"/>
	</logger>
	<logger name="jdbc.resultsettable">
	    <level value="OFF"/> 
	</logger>
	<logger name="jdbc.audit">
	    <level value="OFF"/>
	</logger>
	<logger name="jdbc.resultset">
	    <level value="OFF"/>
	</logger>
	<logger name="jdbc.connection">
	    <level value="OFF"/>
	</logger>

    <!-- 
    <logger name="com.wondertek.mobilevideo.core.base.UserOperLogAdvice">
        <level value="INFO"/>
        <appender-ref ref="USER_OPER_LOG_FILE"/>
    </logger>
    <logger name="com.wondertek.mobilevideo.oms.basic.webapp.interceptor.RequestInterceptor">
        <level value="INFO"/>
        <appender-ref ref="ACCESS_ACTION_LOG"/>
    </logger>
    
    <logger name="com.wondertek.mobilevideo">
        <level value="DEBUG"/>
        <appender-ref ref="CONSOLE"/>
    </logger>
    -->
    <root>
        <level value="DEBUG"/>
        <appender-ref ref="CONSOLE"/>
    </root>

</log4j:configuration>


