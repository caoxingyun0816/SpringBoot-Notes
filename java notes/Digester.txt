
而使用Apache Jakarta的Digester，解析XML文件非常方便且不需要过多的关心底层的具体解析过程。

工作原理如下: Digester底层采用SAX(Simple API for XML)析XML文件，所以很自然的，对象转换由"事件"驱动，在遍历每个节点时，
检查是否有匹配模式，如果有，则执行规则定义的操作，比如创建特定的Java对象，或调用特定对象的方法等。此处的XML元素根据匹配模式(matching pattern)识别，而相关操作由规则(rule)定义。

	
	@Override
	public SyncContentsResult parseCipSyncResultXml(String xml) throws UnsupportedEncodingException, IOException, SAXException {
		
		if(StringUtils.isEmpty(xml)) {
			log.info("CIP 反注响应Xml文件内容为空.");
			return null;
		}
		log.info("开始解析CIP反注异步响应XML内容: " + xml);
		final Digester digester = new Digester();
        digester.setClassLoader(SyncContentAsset.class.getClassLoader());
        digester.setValidating(false);
        digester.addObjectCreate("SyncContentsResult", SyncContentsResult.class);
        digester.addSetProperties("SyncContentsResult", "serialNo", "serialNo");
        digester.addSetProperties("SyncContentsResult", "TimeStamp", "TimeStamp");
        digester.addObjectCreate("SyncContentsResult/Assets/Asset", SyncContentAsset.class);
        digester.addSetProperties("SyncContentsResult/Assets/Asset", "ID", "id");
        digester.addSetProperties("SyncContentsResult/Assets/Asset", "currentID", "currentId");
        digester.addSetProperties("SyncContentsResult/Assets/Asset", "type", "type");
        digester.addSetProperties("SyncContentsResult/Assets/Asset", "op", "operation");
        digester.addSetProperties("SyncContentsResult/Assets/Asset", "result", "syncStatus");
        digester.addSetProperties("SyncContentsResult/Assets/Asset", "desc", "syncDesc");
        digester.addSetNext("SyncContentsResult/Assets/Asset","addSyncAsset");
        
        final SyncContentsResult result = (SyncContentsResult) digester.parse(new ByteArrayInputStream(xml.getBytes("UTF-8")));
        log.info("析CIP反注异步响应XML内容完成。");
        return result;
        
	}


package com.wondertek.reinjection.vo;

public class SyncContentAsset {

	private String id;
	private String currentId; // cip 提供的id
	private String type; 
	private Integer operation;
	private Integer syncStatus;
	private String syncDesc;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getCurrentId() {
		return currentId;
	}

	public void setCurrentId(String currentId) {
		this.currentId = currentId;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public Integer getOperation() {
		return operation;
	}

	public void setOperation(Integer operation) {
		this.operation = operation;
	}

	public Integer getSyncStatus() {
		return syncStatus;
	}

	public void setSyncStatus(Integer syncStatus) {
		this.syncStatus = syncStatus;
	}

	public String getSyncDesc() {
		return syncDesc;
	}

	public void setSyncDesc(String syncDesc) {
		this.syncDesc = syncDesc;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((currentId == null) ? 0 : currentId.hashCode());
		result = prime * result + operation;
		result = prime * result + ((syncDesc == null) ? 0 : syncDesc.hashCode());
		result = prime * result + syncStatus;
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SyncContentAsset other = (SyncContentAsset) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (currentId == null) {
			if (other.currentId != null)
				return false;
		} else if (!currentId.equals(other.currentId))
			return false;
		if (operation != other.operation)
			return false;
		if (syncDesc == null) {
			if (other.syncDesc != null)
				return false;
		} else if (!syncDesc.equals(other.syncDesc))
			return false;
		if (syncStatus != other.syncStatus)
			return false;
		if (type == null) {
			if (other.type != null)
				return false;
		} else if (!type.equals(other.type))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "SyncContentAsset [id=" + id + ", currentId=" + currentId + ", type=" + type + ", operation="
				+ operation + ", syncStatus=" + syncStatus + ", syncDesc=" + syncDesc + "]";
	}

}


package com.wondertek.reinjection.vo;

import java.util.HashMap;

import com.wondertek.reinjection.util.CipUtil;

public class SyncContentsResult {

	private String serialNo;
	private String TimeStamp; 
	
	private SyncContentAsset resAsset;
	
	private HashMap<String, SyncContentAsset> items = new HashMap<String, SyncContentAsset>();//CipResMedia
	
	public void addSyncAsset(SyncContentAsset asset) {
		if(CipUtil.isSubContentType(asset.getType())) {
			items.put(asset.getId(), asset);
		}else {
			this.resAsset = asset;
		}
	}

	public SyncContentAsset findSyncAsset(String id) {
		return items.get(id);
	}

	public String getSerialNo() {
		return serialNo;
	}

	public void setSerialNo(String serialNo) {
		this.serialNo = serialNo;
	}

	public String getTimeStamp() {
		return TimeStamp;
	}

	public SyncContentAsset getResAsset() {
		return resAsset;
	}

	public void setResAsset(SyncContentAsset resAsset) {
		this.resAsset = resAsset;
	}

	public void setTimeStamp(String timeStamp) {
		TimeStamp = timeStamp;
	}

	public HashMap<String, SyncContentAsset> getItems() {
		return items;
	}

	public void setItems(HashMap<String, SyncContentAsset> items) {
		this.items = items;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((TimeStamp == null) ? 0 : TimeStamp.hashCode());
		result = prime * result + ((items == null) ? 0 : items.hashCode());
		result = prime * result + ((serialNo == null) ? 0 : serialNo.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SyncContentsResult other = (SyncContentsResult) obj;
		if (TimeStamp == null) {
			if (other.TimeStamp != null)
				return false;
		} else if (!TimeStamp.equals(other.TimeStamp))
			return false;
		if (items == null) {
			if (other.items != null)
				return false;
		} else if (!items.equals(other.items))
			return false;
		if (serialNo == null) {
			if (other.serialNo != null)
				return false;
		} else if (!serialNo.equals(other.serialNo))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "SyncContentsResult [serialNo=" + serialNo + ", TimeStamp=" + TimeStamp + ", resAsset=" + resAsset
				+ ", items=" + items + "]";
	}

	
	
}

例子2：

要解析的xml文件books.xml如下：
<?xml version="1.0" encoding="UTF-8" ?>   
<library name="alibaba图书馆">   
     <book title ="thinking in java"  author="xxx">   
         <chapter>   
             <no>第一章</no>   
             <caption>第一章的标题</caption>   
         </chapter>   
         <chapter>   
             <no>第二章</no>   
             <caption>第二章的标题</caption>   
         </chapter>   
     </book>   
     <book title="effective java"  author="yyy">   
         <chapter>   
             <no>第一章</no>   
             <caption>第一章的标题</caption>   
         </chapter>   
     </book>   
</library>  

Library类如下：
public class Library {  
    private String name;  
    private List<Book> bookList = new ArrayList<Book>();  
      
    public String getName() {  
        return name;  
    }  
      
    public void setName(String name) {  
        this.name = name;  
    }  
      
    public List<Book> getBookList() {  
        return bookList;  
    }  
      
    public void addBook(Book book) {  
        bookList.add(book);  
    }  
}  

Book类如下：
public class Book {  
  
    private String        title;  
    private String        author;  
    private List<Chapter> chapters = new ArrayList<Chapter>();  
  
    /** 
     * 这个方法，用来演示xml的解析时用的另一种方式 
     * @param title 
     * @param author 
     */  
    public void setBookInfo(String title, String author) {  
        this.title = title;  
        this.author = author;  
    }  
  
    public void addChapter(Chapter chapter) {  
        this.chapters.add(chapter);  
    }  
      
    public String getTitle() {  
        return title;  
    }  
      
    public void setTitle(String title) {  
        this.title = title;  
    }  
      
    public String getAuthor() {  
        return author;  
    }  
      
    public void setAuthor(String author) {  
        this.author = author;  
    }  
      
    public List<Chapter> getChapters() {  
        return chapters;  
    }  
  
    public void setChapters(List<Chapter> chapters) {  
        this.chapters = chapters;  
    }  
}  

