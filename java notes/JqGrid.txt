后台管理助手jqgrid
jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，由于在客户端使用ajax异步加载数据，使得它能够与许多的后端语言如：PHP, ASP, Java Servlets, JSP, ColdFusion, and Perl中的任何一种结合起来进行开发。

1.jqGrid背景介绍
jqGrid是Trirand软件开发公司的Tony Tomov开发的一个方便人们开发使用的web组件，它包含了许多免费和开源的库如：jQuery, ThemeRoller, & jQuery UI等 ，同时最新的版本已经支持bootstrapUI，Tony最初的时候是因为他需要一种方式来表示数据库信息，这种方式有速度上的要求同时还要独立于服务器端技术和后台数据库，于是jqGrid诞生了，从最初的版本到现在已经升级到了Guriddo jqGrid 5.0.2 ，之前的各个版本都是在不断的修复bug以及添加符合需求的新功能。jqGrid越来越趋于完善。

2.在页面中引入相关文件，一般css两个分别是：

ui.jqgrid.css

jquery-ui.css/ ui.jqgrid-bootstrap.css



，js四个：

jquery-1.7.2.min.js 

jquery.jqGrid.min.js    

 jquery-ui.js    / bootstrap.min.js

 grid.locale-cn.js

3 刷新jqGrid数据。

常用到刷新jqGrid数据的情况是，在用到查询的时候，根据查询条件，请求数据，并刷新jqGrid表格，使用方式如下：


$("#search_btn").click(function(){ 

    //此处可以添加对查询数据的合法验证 

    var orderId = $("#orderId").val(); 

    $("#list4").jqGrid('setGridParam',{ 

        datatype:'json', 

        postData:{'orderId':orderId}, //发送数据 

        page:1 

    }).trigger("reloadGrid"); //重新载入 

});


① setGridParam用于设置jqGrid的options选项。返回jqGrid对象
② datatype为指定发送数据的格式；
③ postData为发送请求的数据，以key:value的形式发送，多个参数可以以逗号”,”间隔；
④ page为指定查询结果跳转到第一页；
⑤ trigger(“reloadGrid”);为重新载入jqGrid表格。


4.无数据的提示信息。

当后台返回数据为空时，jqGrid本身的提示信息在右下角，不是很显眼，下面方法将实现在无数据显示的情况下，在jqGrid表格中间位置提示“无数据显示”。如下图：当然，你的div样式可以设置的更好看些。
loadComplete:function() {//如果数据不存在，提示信息

    var rowNum = $("#list4").jqGrid('getGridParam','records');

    if (rowNum      if($("#norecords").html() == null){

            $("#list4").parent().append("</pre>

<divid="norecords">没有查询记录！</div>

<pre>");

        }

        $("#norecords").show();

    }else{//如果存在记录，则隐藏提示信息。

        $("#norecords").hide();

    }

}


① loadComplete 为jqGrid加载完成，执行的方法；

② getGridParam这个方法用来获得jqGrid的选项值。它具有一个可选参数name，name即代表着jqGrid的选项名，如果不传入name参数，则会返回jqGrid整个选项options。例：

$("#list4").jqGrid('getGridParam','records');//获取当前jqGrid的总记录数；

注意：这段代码要加在jqGrid的选项设置Option之间，即：$(“#list4″).jqGrid({});代码之间。且各个option之间加逗号间隔。

5常用方法
1、获取选中行ID

        selIDs=$("#grid").getGridParam("selarrrow");//selIDs是一个选中行ID的数组

     selectID=$("#grid").getGridParam("selrow");//这只能获得选中一行的ID，如果表格选中         多行，selrow 这个函数，只能获得选中的最后一行的ID

     这里需要主要selarrrow与selrow两个函数的区别



2、判断是否有选中行

       selIDs.length>0  则表示界面上有选中的行，否则表示没有选择任何行



3、获取表格的所有数据

     var   gridData= $("#grid").jqGrid("getRowData");



4、获取表格选中行的数据

        for(var i=0;i<selIDs.length;i++){

           var gridData= $("#grid").jqGrid("getRowData",selIDs[i]);//这是获得 某一行的数据          
   }



5、  获取单元格的值和设置单元格的值

     var strValue=$("#grid").jqGrid("getCell",selIDs[i],"表格列的名字");//行ID和列名字,决定了一个                        单元格的位置，从而可以取出单元格的值



      $("#grid").jqGrid("setCell",selIDs[i],"表格列的名字","数据");//设置单元格的值，需要行id，列                        名，以及对应列名的值



6、获得行的值和设置行的值    (获得行的值上面已经写出)

     $("#grid").setRowData(rowId,{l列名:值,列明:值....});

       setCell方法与setRowData方法的不同是：setRowData可以同时设置一行的值，即多个列的值，而setCell只能设置一个单元格的值



7、获取表格所有的ID

    var strIds=  $("#grid").jqGrid("getDataIDs");//获得表格所有行的ID



8、设置列的属性：

         $("#grid").jqGrid("setColProp",{editType:"text",formatter:"text"});//这里设置了列的两个属性，自己可以根据需要改变



9、获得当前表格的行数：

    $("#grid").getGridParam("recount");



10、设置某一行被选中

   $("#grid").setSelection(rowId);//再很多文章上看到这个方法，需要注意的是：

这个方法起的是反选的作用，也就是如果某一行被选中，使用这个方法就是取消选中，如果某一行处于未选中状态，使用这个方法使其选中



在这些方法中所有获得行ID的，其实是获取的列属性key=true的那一列的值，只是一般设置ID列的key=true


6.jqGrid随窗口大小变化自适应大小
第一种： 

jqGrid随窗口大小变化自适应宽度

$(window).on('resize.jqGrid', function () {
			$(grid_selector).jqGrid( 'setGridWidth', $("#subContentModal > div.modal-dialog").width() - 24);
	    })

水平和垂直滚动条
$( pGridId ).closest(".ui-jqgrid-bdiv").css({ 'overflow-y' : 'scroll' });
 
需要保持水平滚动条，则：
$( pGridId ).closest(".ui-jqgrid-bdiv").css({ 'overflow-x' : 'scroll' });

7.jQuery基本操作

1.加载主数据
jqgrid的一般加载写法，直接请求，然后展示数据
$(grid_selector).jqGrid({
			url: webroot+"inverse/querySubcontentList.htm",
			mtype:'post',
			datatype:"local",
			data：{"sss":sss,"aaa":ssss},//传递参数，也可以重新设置参数，重新发送，重新加载(参照showSubContenEvt)
			height: 270,
			colNames:['媒资ID','媒资名称','媒体文件ID','魔百合子内容ID','播放路径'],
			colModel:[
	            {name:'assetId',index:'assetId', width:100,sorttype:"int",editable:true},
	            {name:'name',index:'name', width:100,editable:true},
				{name:'mediaId',index:'mediaId', width:100,orttype:"int",editable:true},
				{name:'cipMediaId',index:'cipMediaId', width:100,sorttype:"int",editable:true},
				{name:'playUrl',index:'playUrl', width:150,editable:true}
			], 
			viewrecords : true,
			rowNum:20,
			rowList:[20,100,500,1000],
			pager : pager_selector,
			altRows: true,
			jsonReader: {
				total: 'total',
				records:'records',
				root:'rows',
				repeatitems:true
			},
			//toppager: true,
			sortable:true,
			multiselect: true,
			//multikey: "ctrlKey",
	        multiboxonly: true
}

2.主数据后加按钮
首先对于在主数据后加一列进行一系列操作。
在主数据加载时根据每一行的id，动态添加按钮。
为每一行最后添加一个按钮，用来触发删除，更新等操作
可以在数据加载最后一行添加按钮
$(grid_selector).jqGrid()加一个gridComptete属性。
gridComplete:function(){
			var ids = $(grid_selector).jqGrid('getDataIDs');
			for(var i = 0;i<ids.length;i++){
				var id = ids[i];
				var showSubContent = "<button title='魔百合子内容' class='btn btn-link' onClick='showSubContenEvt(\""+id+"\")'><i class='fa fa-eye'></i>"+"</button>";
				jQuery("#grid-table-dbgl").jqGrid('setRowData',ids[i],{showSubContent:showSubContent});
			}
		},

var ids = $(grid_selector).jqGrid('getDataIDs');获得所有数据的id 集合，为了区分具体操作哪一行可以将id传入按钮的触发函数。
根据该id获得 该行数据 var rowData = $("#grid-table-dbgl").getRowData(id);
对于查询，修改等操作都可以从该rowData获取参数传入后台。

1)直接展示子数据。
	需要一个modia展示子数据，然后触发按钮时将请求参数重新set，然后加载数据。

	页面上的button按钮的click事件，重新获取参数后发送参数，然后重新加载数据。
	function showSubContenEvt(id){
	var rowData = $("#grid-table-dbgl").getRowData(id);
	$("#grid-table-subcontent").jqGrid('setGridParam',{
		datatype:"json",
		postData:{"contentId":rowData.contentId},
	}).trigger("reloadGrid");
	$("#subContentModal").modal("show");

2)修改按钮
界面显示修改的数据。需要id传入，获取数据，战术刀界面，然后保存按钮，
触发函数，用ajax请求
调用ajax请求
	$.ajax({
		url : webroot + "inverse/uploadPlayUrlToCip.htm",
		dateType : "json",
		data : {"contentIds" : contentIds},
		type : "post",
		success : function(resultData){
			if(!empty(resultData.mediaIds)){
				alertmsg("waring","contentId为:"+resultData.mediaIds+"的媒资,没有魔百合子内容!");
			}
			//处理返回数据
			if(!empty(resultData.response)){
				if(resultData.response == -1){
					alertmsg("error","上传失败，请稍后重试！");
					return;
				}if(resultData.response == 1){
					alertmsg("success","请求已发出，请等待回执。");
				}
				else{
					alertmsg("waring","contentId为:"+resultData.response + "的媒资上传PlayUrl失败!");
				}
			}		
		}
	})

对于修改操作，修改后要重新加载数据，在success回调函数添加。
if(data.result){	
	$('#grid-table').jqGrid('setGridParam', {
    				url : webroot + "inverse/query.htm",
    				page:1,
    				mtype: "post"
    			}).trigger("reloadGrid"); 

疑问：
不懂，为什么加载主数据直接请求，按钮触发加载子数据第一次却不请求，当点击的时候才请求？
重新发送给url赋值时，又直接请求了？


选中数据 --> 用按钮触发函数
而对于选中的数据操作，可以直接获得选中的数据。
//获取选中行的ID
var rowIds = $("#grid-table-dbgl").jqGrid("getGridParam","selarrrow");
//获取数据
var rowData = $("#grid-table-dbgl").getRowData(id);
//获取指定列名的值
contentId = $("#grid-table-dbgl").jqGrid("getCell",rowIds[i],"contentId");
然后传参。

sord是决定排序是倒序还是顺序。sidx是决定根据哪个字段来进行排序。

8.修改某一行后，刷新后继续选中该行。
定义一个全局变量sid，初始化jqgrid时加
		onSelectRow: function(ids) {
			sid = ids;
		},
		gridComplete: function(){
			if(sid){
				$(this).jqGrid("setSelection",sid);
			}
		}
这样在选择行是记录了行id并赋予sid，再刷新jqgird后在complete中判读是否选中过，选中过就选择刚才选择的行。


9.jqgrid动态显示隐藏某一列。例如我们不想要那个方框列，用来勾选的多选框列，而想添加一个序号列，从1到n的自增列，那么就可以这样做：

jQuery(user_selector).setGridParam().hideCol("cb").trigger("reloadGrid"); //隐藏
jQuery("#grid_id").setGridParam().showCol("cb").trigger("reloadGrid");//显示

$("#grid-table").closest(".ui-jqgrid-bdiv").css({ 'overflow-x' : 'hidden' });// 隐藏水平滚动条
$("#grid-table").closest(".ui-jqgrid-hdiv").css({ 'overflow-y' : 'hidden' });// 隐藏垂直滚动条

10.循环绑定事件
$('#create button').each(function(n, v)

$('#create button').each(function(n, v) {
		var ac = $(v).attr("data-action");
		if(ac) {
			$(v).unbind('click').click(function(e) {
				var aid = $("#aid").val();
				if(ac == 'save') {
					Lobibox.confirm({ 
					       title:"提示",      //提示框标题 
					            msg: "确认保存?",   //提示框文本内容 
					       callback: function ($this, type, ev) {               //回调函数 
					               if (type === 'yes') { 
					            	   Mam.asset.saveHandler();    
					               } else if (type === 'no') { 
					                          
					               } 
					          } 
					});
				}else if(ac == 'save_for_submit') {
					Lobibox.confirm({ 
					       title:"提示",      //提示框标题 
					            msg: "确认提交入库?",   //提示框文本内容 
					       callback: function ($this, type, ev) {               //回调函数 
					    	   if (type === 'yes') { 
					            	 Mam.asset.saveForSubmitHandler();   
					               } else if (type === 'no') { 
					                          
					               } 
					          } 
					});
				}else if(ac == 'submit') {
					Lobibox.confirm({ 
					       title:"提示",      //提示框标题 
					            msg: "确认入库?",   //提示框文本内容 
					       callback: function ($this, type, ev) {               //回调函数 
					               if (type === 'yes') { 
					            	   Mam.asset.submitHandler();  
					               } else if (type === 'no') { 
					                          
					               } 
					          } 
					});
				}
			});
		}
	});


